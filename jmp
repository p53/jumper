#!/usr/bin/env ruby 

require 'sqlite3'
require 'pathname'
require 'etc'
require 'yaml'

# getting paths to configs, libraries, data
script_abs_path = File.absolute_path($0)
path = Pathname.new(script_abs_path)
script_dir = path.dirname

conf_dir = "#{script_dir}/config/"

config_path = "#{conf_dir}config.yml"

config = YAML.load_file(config_path)

lib_dir = "#{script_dir}/" + config["dirs"]["library"]
tpl_dir = "#{script_dir}/" + config["dirs"]["templates"]
data_dir = "#{script_dir}/" + config["dirs"]["data"]

# we are getting db source type we want to use
data_src_keys = config['datasource'].keys
data_src_type = data_src_keys[0]

arg_parser_path = "#{lib_dir}jump_arg_parser"
db_source_path = "#{lib_dir}db/" + data_src_type
opt_react_path = "#{lib_dir}option_reactor"

require arg_parser_path
require db_source_path
require opt_react_path

# initializing data object, retrieving data
data_source = data_src_type.capitalize
data_class = Object.const_get("Jump").const_get("Db").const_get(data_source)

db_src = data_class.getSingleton(config['datasource'][data_src_type], data_dir)
opt_react = Jump::OptionReactor.new(tpl_dir)

# parsing options, calling data method then action method
parsed_options = Jump::JumpArgParser.parse(ARGV)

data_method = parsed_options.action.to_s + 'Query'
react_method = parsed_options.action.to_s + 'Action'

host_records = db_src.public_send(data_method, parsed_options)

opt_react.public_send(react_method, parsed_options, host_records, config['datasource'][data_src_type])

=begin

=NAME

  jmp - simple command line utility for centralized ssh access

=SYNOPSIS

  jmp -a [list|search|connect|add|delete|detail|get|put|cmd|script] -s|--server 
  -i|--ip ip -f|--from path -t|--to path -c|--cmd -u|--user -k|--priv_key 
  -n|--id -d|--desc -h|--help

=DESCRIPTION

  Simple command line utility for centralized ssh access. We can list, search,
  add, delete servers.

  -a|--action     this is required argument, specifies what we want to do

      list        action doesn't require any argument, list all servers present
                  in database

      search      action helps to search through database. You can specify
                  server, ip, description arguments and what you want to search

      connect     connect user to specified server. You can connect to server
                  by specifying server, ip or id. Also you can specify user
                  as who you want to connect also private key path you want to
                  use. If you don't specify user, you will be connecting as
                  user under which you are running this tool. If you don't
                  specify private key path and you are not user, tool will
                  attempt to load key from .ssh directory in your home directory 
                  and will be looking for a file with the same name as server
                  you specified, from this is clear that this will be attempted
                  just in case you are specifying server name, not ip or id. If
                  you are root user, tool will first check if private key is 
                  in database, if not procedure is same as for ordinary user
      
      add         action adds new server in database. It requires server name,
                  IP, description. This can be executed only by root!
      
      delete      action deletes new server. It requires only id. This can be 
                  executed only by root!
      
      detail      action list records in key value format. If we don't specify 
                  any argument list all records in key value format. If we 
                  specify id it shows specific record

      get         action used for copying files or directories from remote server
                  Apply all conditions as for connect section. If you specify
                  directory path ending with slash, program copies in recursive
                  mode

      put         action used for copying files or directories to remote server
                  Apply all conditions as for connect section. If you specify
                  directory path ending with slash, program copies in recursive
                  mode
                  
      cmd         action used for running command supplied in cmd argument on
                  remote machine, apply same rules as for connect

      script      action aimed at running script from localhost on remote server
                  requires from argument, path to script, apply same rules
                  as for connect

  -s|--server     server name as appears in database
  -i|--ip         IP address of server as specified in database
  -f|--from       path of file or directory we want to copy/execute
  -t|--to         path of file or directory where we want to copy files
  -c|--cmd        command we want to run on remote server
  -u|--user       user name as who we want to connect
  -k|--priv_key   private key path
  -d|--desc       description of server
  -n|--id         id of server as appears in database
  -h|--help       help

=EXAMPLES

  Connect to server example1:

    jmp -a connect -s example1

  Connect to server server4 with user simple and private key in path
  /home/simple/server4

    jmp -a connect -s server4 -u simple -k /home/simple/server4

  Connect to server, specifying server with id 5:
    
    jmp -a connect -n 5
  
  List all servers in database:

    jmp -a list

  Search for server which has "try to find in server description" in description

    jmp -a search -d "try to find in server description"
  
  List all servers in key value format:

  jmp -a detail
  
  List server with id 2:

    jmp -a detail -n 2
  
  Add new server with name example2, description, IP:

    jmp -a add --server example2 --desc "This is example" --ip 10.0.0.1
  
  Deletes server with id 3:

    jmp -a delete -n 3
  
  Copy file /tmp/lala from server example1 to /srv:

    jmp -a get -s example1 -f /tmp/lala -t /srv
  
  Copy all files from /tmp/haha folder from server with id 5 to local folder /srv:

    jmp -a get -n 5 --from '/tmp/haha/*' -t /srv
  
  Copy recursively directory /tmp/huge from remote server with IP 10.10.0.2 to /mama

    jmp -a get -i 10.10.0.2 --from /tmp/huge/ -t /mama
  
  Copy recursively directory /tmp/tata from localhost to remote server with
  IP 10.10.0.2 to directory /mama

    jmp -a put -i 10.10.0.2 --from /tmp/tata/ -t /mama

  Run command uname -a on remote server server12:

    jmp -a cmd -c 'uname -a' -s server12

  Run script from path /home/user/script.sh on remote server myserver11:

    jmp -a script -f '/home/user/script.sh' -s myserver11

=COPYRIGHT

  Copyright Pavol Ipoth, <pavol.ipoth@gmail.com>, 2015

=LICENSE

  GPLv3

=end